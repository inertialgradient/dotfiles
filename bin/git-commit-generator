#!/usr/bin/env python3

import subprocess
import requests
import sys


def get_git_diff():
    """Get the git diff of staged changes"""
    try:
        diff = subprocess.check_output(["git", "diff", "--cached"], text=True)
        if not diff:
            print("No staged changes found. Stage your changes with 'git add' first.")
            sys.exit(1)
        return diff
    except subprocess.CalledProcessError as e:
        print(f"Error getting git diff: {e}")
        sys.exit(1)


def generate_commit_message(diff, model="deepseek-r1:1.5b"):
    """Generate a commit message using Ollama"""
    prompt = f"""Generate a concise and descriptive git commit message for the following changes.
Follow these guidelines:
- Use the imperative mood ("Add" not "Added")
- Keep the first line under 50 characters
- Provide a more detailed description after a blank line if needed
- Focus on WHY and WHAT, not HOW

Changes:
{diff}
"""
    try:
        response = requests.post(
            "http://localhost:11434/api/generate",
            json={
                "model": model,
                "prompt": prompt,
                "system": "You are a helpful assistant who writes clear and concise git commit messages.",
                "stream": False,
            },
        )
        response.raise_for_status()
        return response.json()["response"].strip()
    except requests.exceptions.RequestException as e:
        print(f"Error connecting to Ollama: {e}")
        print("Make sure Ollama is running (ollama serve)")
        sys.exit(1)


def main():
    # Check if Ollama is running
    try:
        requests.get("http://localhost:11434/api/tags")
    except requests.exceptions.ConnectionError:
        print(
            "Error: Cannot connect to Ollama. Make sure it's running with 'ollama serve'"
        )
        sys.exit(1)

    # Get the diff
    diff = get_git_diff()

    # Generate commit message
    commit_message = generate_commit_message(diff)

    # Print the generated message
    print("\nGenerated commit message:\n")
    print(commit_message)

    # Ask user if they want to use this message
    while True:
        choice = input("\nDo you want to use this commit message? [Y/n/r]: ").lower()
        if choice in ["", "y", "yes"]:
            try:
                subprocess.run(["git", "commit", "-m", commit_message], check=True)
                print("Changes committed successfully!")
            except subprocess.CalledProcessError as e:
                print(f"Error making commit: {e}")
            break
        elif choice in ["n", "no"]:
            print("Commit aborted.")
            break
        elif choice == "r":
            print("\nGenerating new message...\n")
            commit_message = generate_commit_message(diff)
            print(commit_message)
        else:
            print("Please enter 'y' (yes), 'n' (no), or 'r' (regenerate)")


if __name__ == "__main__":
    main()
