#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require_relative "compiled_markdown"

# assumes something like "week03" is the PWD
WEEK_NUM = File.basename(Dir.pwd)

options = {
  transcript: "#{WEEK_NUM}-vtt.md",
  summaries: "#{WEEK_NUM}-summary.md",
  output: "#{WEEK_NUM}-notes.md",
}

OptionParser.new do |opts|
  opts.banner = <<-STR
    Usage:

    transcript-summarize [options]

    Options:
    --transcript <transcript_file> Default: week<num>-vtt.md
    --summaries <summaries_file> Default: week<num>-summary.md
    --output <compiled_file> Default: week<num>-notes.md
  STR

  opts.on("--transcript <transcript_file>", "Transcript file") { options[:transcript] = _1 }
  opts.on("--summaries <summaries_file>", "Summaries file") { options[:summaries] = _1 }
  opts.on("--output <compiled_file>", "Output file") { options[:output] = _1 }
end

# read transcript file
transcripts = CompiledMarkdown.from_file(options[:transcript])

# read summaries file
summaries = CompiledMarkdown.from_file(options[:summaries])

# interleave transcript and summaries and write to output file
File.open(options[:output], "w+") do |file|
  transcripts.each do |section_num, section|
    summary = summaries[section_num]&.body.to_s.strip
    file.puts("# #{section_num.chomp('.')}. #{section.header}")
    file.puts("## Summary\n\n#{summary}\n\n") unless summary.empty?
    file.puts("## Transcript\n\n#{section.body}\n\n")
  end
end
