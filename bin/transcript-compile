#!/usr/bin/env ruby
# frozen_string_literal: true

Section = Struct.new(:number, :header, :body)

FORCE_RECOMPILE = ARGV.include?("--force")

def parse_transcript(filename, format: "vtt")
  if format == "vtt"
    lines = File.read(filename).split(/^[[:digit:]]+$/).map(&:strip).slice(1..)
    vtt_lines = lines.map do |line|
      timestamp, speech = line.split(/\.[[:digit:]]{3}\s-->.+\n/)
      [timestamp, speech.gsub("\n", " ")].join(" ")
    end
    "```\n#{vtt_lines.join("\n")}\n```"
  else
    lines = File.read(filename).gsub(". ", ".\n").gsub("? ", "?\n")
    "```\n#{lines}\n```"
  end
end

def parse_header(lines, format:)
  lines
    .sub(".#{format}", "")
    .gsub("_", " ")
    .sub(/^([[:alnum:].-]+)[\s](.+)/, "\\1<+>\\2")
    .tap { |result| p result}
    .split("<+>")
end

def parse_compiled_file(file)
  File.read(file).split(/^#\s/).reject(&:empty?).map do |section|
    header, *contents = section.split(/^##\s/).reject(&:empty?)

    contents = contents.first
    section_num, *header = header.split(". ")
    heading = header.join(". ")

    contents = contents.split("\n")
    contents.shift
    contents.shift while contents.first&.empty?
    Section.new(section_num, heading, contents.join("\n").strip)
  end
end

def main(format:)
  transcripts_file = "#{File.basename(Dir.pwd)}-#{format}.md"
  transcript_files = Dir.glob("*.#{format}")
  transcripts = {}

  puts "Checking for transcripts file at #{transcripts_file}..."
  if transcript_files.empty? && !File.exist?(transcripts_file)
    puts "> Found no transcript files and no existing transcript file. Quitting."
    exit(1)
  end

  if File.exist?(transcripts_file) && !FORCE_RECOMPILE
    puts "> Compiled transcripts file found. Reading."
    parse_compiled_file(transcripts_file).each { transcripts[_1.number] = _1 }
  else
    puts "> #{transcript_files.size} #{format} files found. Compiling."
    transcript_files.each do |filename|
      section_num, header = parse_header(filename, format: format)
      entry = parse_transcript(filename, format: format)

      transcripts[section_num] = Section.new(section_num, header, entry)
    end
  end

  printf "Writing to %s...", transcripts_file
  File.open(transcripts_file, "w+") do |file|
    transcripts.each do |section_num, transcript|
      file.puts("# #{section_num.chomp('.')}. #{transcript.header}\n\n")
      file.puts("## Transcript\n\n#{transcript.body}\n\n")
    end
  end

  printf "done.\n"
end

main(format: "vtt")
main(format: "txt")
