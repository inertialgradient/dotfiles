#+TITLE: Emacs Config

* Notes

You do not need to run 'doom sync' after modifying this file!

Some additional useful functions/macros:

- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to
  this file. Emacs searches the =load-path= when you load packages with
  =require= or =use-package=.
- =map!= for binding new keys

* General

Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+begin_src elisp
(setq user-full-name "Jake Romer"
      user-mail-address "jake@jmromer.org")
#+end_src

Use =,= for the local leader key.

#+begin_src elisp
(setq doom-localleader-key ",")
#+end_src

File paths for Org documents, Deft notes, and etc.

#+begin_src elisp
(setq org-directory (concat (getenv "XDG_DATA_HOME") "/org"))
(setq deft-directory (concat org-directory "/notes"))
#+end_src

* display

Doom exposes five (optional) variables for controlling fonts in Doom.
Here are the three important ones:

#+begin_src elisp
; `doom-big-font' -- used for `doom-big-font-mode': use this for presentations / streaming
(setq doom-font (font-spec :family "SF Mono" :size 16 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "SF Mono" :size 16)
      doom-big-font (font-spec :family "SF Mono" :size 24))

(setq doom-theme 'doom-one)
(setq display-line-numbers-type 'relative)
(add-to-list 'initial-frame-alist '(fullscreen . maximized)) ;; Start maximized
#+end_src

* dired

#+begin_src elisp
(map! :desc "Enter dired in the CWD of the current buffer's file." :n "-" #'dired-jump)
#+end_src

* evil

** evil-matchit

#+begin_src emacs-lisp
(global-evil-matchit-mode)
#+end_src

** evil-sort

Define "inside" motion for: buffer, paragraphs, delimiters.

#+begin_src emacs-lisp
(defun evil-sort-inner (textobj &optional desc)
  "Sort inside the TEXTOBJ surrounding the point.
When DESC is non-nil, sort in descending order.
TEXTOBJ should be a symbol corresponding to `x' in the `evil-inner-x' functions."
  (interactive)
  (let ((evil-textobj (intern (format "evil-inner-%s" textobj)))
        (start-pos (point)))
    (save-excursion
      (let* ((bounds (call-interactively evil-textobj))
             (beg (first bounds))
             (end (second bounds)))
        (sort-lines desc beg end)))
    (goto-char start-pos)))

(defun evil-sort-inner-paragraph (desc)
  "Sort inside the paragraph under the point.
When called with a prefix argument DESC, sort in descending order."
  (interactive "P")
  (evil-sort-inner 'paragraph desc))

(defun evil-sort-inner-buffer(desc)
  "Sort inside the current buffer.
When called with a prefix argument DESC, sort in descending order."
  (interactive "P")
  (evil-sort-inner 'buffer desc))

(defun evil-sort-inner-curly(desc)
  "Sort inside the current curly braces.
When called with a prefix argument DESC, sort in descending order."
  (interactive "P")
  (evil-sort-inner 'curly desc))

(defun evil-sort-inner-paren(desc)
  "Sort inside the current parentheses.
When called with a prefix argument DESC, sort in descending order."
  (interactive "P")
  (evil-sort-inner 'paren desc))

(defun evil-sort-inner-bracket(desc)
  "Sort inside the current parentheses.
When called with a prefix argument DESC, sort in descending order."
  (interactive "P")
  (evil-sort-inner 'bracket desc))
#+end_src

Add motions to normal state map.
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "g s i p") #'evil-sort-inner-paragraph)
(define-key evil-normal-state-map (kbd "g s i g") #'evil-sort-inner-buffer)
(define-key evil-normal-state-map (kbd "g s i {") #'evil-sort-inner-curly)
(define-key evil-normal-state-map (kbd "g s i }") #'evil-sort-inner-curly)
(define-key evil-normal-state-map (kbd "g s i [") #'evil-sort-inner-bracket)
(define-key evil-normal-state-map (kbd "g s i ]") #'evil-sort-inner-bracket)
(define-key evil-normal-state-map (kbd "g s i (") #'evil-sort-inner-paren)
(define-key evil-normal-state-map (kbd "g s i )") #'evil-sort-inner-paren)
#+end_src

* folding

Use tab to fold in prog modes.

#+begin_src emacs-lisp
(defun tab-to-fold-in-normal-state ()
  "Bind toggle-fold function to the <tab> key."
  (evil-local-set-key 'normal (kbd "<tab>") #'evil-toggle-fold))
(add-hook 'prog-mode-hook #'tab-to-fold-in-normal-state)
#+end_src

* magit

#+begin_src elisp
(map! :desc "Open magit" "s-g" #'magit-status)
#+end_src

** Time tracking

#+begin_src emacs-lisp
(defun git-clock-in ()
  "Clock in with Git."
  (interactive)
  (let ((subject-line (read-string "Task: ")))
    (magit-run-git-with-editor "clock-in" subject-line)))

(defun git-clock-out ()
  "Clock in with Git."
  (interactive)
  (magit-run-git-with-editor "clock-out"))

(with-eval-after-load 'magit
  (transient-insert-suffix 'magit-commit "c" '("i" "Clock In" git-clock-in))
  (transient-insert-suffix 'magit-commit "c" '("o" "Clock Out" git-clock-out)))
#+end_src

* projectile

#+begin_src elisp
(map! :desc "toggle test/implementation"
      :map 'prog-mode-map
      :localleader
      :n ","
      #'projectile-toggle-between-implementation-and-test)
#+end_src

* ruby

** evil-rails

Ex commands for =projectile-rails=. Mainly here for =:AS= and =:AV=.

#+begin_src elisp
(require 'evil-rails)
#+end_src

** format-all

Disable autoformatting in ruby temporarily until =rufo= is updated to format
Ruby 3's new language constructs.

#+BEGIN_SRC elisp
(setq +format-on-save-enabled-modes
      '(not emacs-lisp-mode  ; elisp's mechanisms are good enough
            sql-mode         ; sqlformat is currently broken
            tex-mode         ; latexindent is broken
            latex-mode
            org-msg-edit-mode
            ruby-mode))
#+END_SRC

** seeing-is-believing

#+begin_src emacs-lisp
(require 'seeing-is-believing)

(defun xmpfilter-eval-current-line ()
  "Mark the current line for evaluation and evaluate."
  (interactive)
  (seeing-is-believing-mark-current-line-for-xmpfilter)
  (seeing-is-believing-run-as-xmpfilter))

(after! seeing-is-believing
  (progn
    (add-hook! ruby-mode #'seeing-is-believing)
    (define-key! ruby-mode-map
      "C-c C-c" #'xmpfilter-eval-current-line
      "C-c C-v" #'seeing-is-believing-clear
      "C-c C-f" #'seeing-is-believing-run)
    (setq seeing-is-believing-max-length 150
          seeing-is-believing-max-results 10
          seeing-is-believing-timeout 10.5
          seeing-is-believing-alignment 'file)))
#+end_src

* yankee

#+begin_src emacs-lisp
(after! yankee
  (define-key evil-visual-state-map (kbd "g y") #'yankee-yank))
#+end_src

* yasnippet

#+begin_src elisp
(defun yas/camelcase-file-name ()
  "Camel-case the current buffer's file name."
  (interactive)
  (let ((filename
         (file-name-nondirectory (file-name-sans-extension
                                  (or (buffer-file-name)
                                      (buffer-name (current-buffer)))))))
    (mapconcat #'capitalize (split-string filename "[_\-]") "")))

(defun yas/strip (str)
  "Extract a parameter name from STR."
  (replace-regexp-in-string ":.*$" ""
   (replace-regexp-in-string "^\s+" ""
    (replace-regexp-in-string "," ""
     str))))

(defun yas/to-field-assignment (str)
  "Make 'STR' to 'self.`STR` = `STR`'."
  (format "self.%s = %s" (yas/strip str) (yas/strip str)))

(defun yas/prepend-colon (str)
  "Make `STR' to :`STR'."
  (format ":%s" (yas/strip str)))

(defun yas/indent-level ()
  "Determine the number of spaces the current line is indented."
  (interactive)
  (string-match "[^[:space:]]" (thing-at-point 'line t)))

(defun yas/indent-string ()
  "Return a string of spaces matching the current indentation level."
  (interactive)
  (make-string (yas/indent-level) ?\s))

(defun yas/indented-newline ()
  "Newline followed by correct indentation."
  (interactive)
  (format "\n%s" (yas/indent-string)))

(defun yas/args-list ()
  "Extract an args list from the current line."
  (interactive)
  (string-match "\(.+\)" (thing-at-point 'line t)))

(defun yas/to-ruby-accessors (str)
  "Splits STR into an `attr_accesor' statement."
  (interactive)
  (mapconcat 'yas/prepend-colon (split-string str ",") ", "))

(defun yas/to-ruby-setters (str)
  "Splits STR into a sequence of field assignments."
  (interactive)
  (mapconcat 'yas/to-field-assignment
             (split-string str ",")
             (yas/indented-newline)))
#+end_src
