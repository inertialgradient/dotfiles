# prefix key: Ctrl+a
unbind C-b
set -g prefix C-a
bind-key -r C-a send-prefix

# Use prefix-Esc to enter copy mode
unbind-key [
bind-key Escape copy-mode

# improve colors
set-option -g default-terminal "screen-256color"

# reload tmux conf
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# increase scrollback to 10,000 lines
set -g history-limit 10000

# Restore clear screen keybind mapped over by tmux-navigator
bind C-l send-keys C-l

# No delay for escape key press
set -sg escape-time 0

# number panes and windows starting at 1
set-window-option -g pane-base-index 1
set-option -g base-index 1

# renumber windows sequentially after closing any of them
set-option -g renumber-windows on


# -------- Statusbar settings ----------------------
set -g status-bg default
set -g status-fg colour237
set -g status-interval 10
set -g status-left '#[fg=colour221]#I:#P '
set -g status-left-length 50
set -g status-right '#[fg=blue]#S #[fg=white]%l:%M#[default]'
set -g status-utf8 on
set -g window-status-bg default
set -g window-status-current-bg default
set -g window-status-current-fg colour222

# default window title colors
set-window-option -g window-status-fg blue

# pane border
set-option -g pane-active-border-fg blue

# pane number display
set-option -g display-panes-active-colour blue
set-option -g display-panes-colour brightred

# message bar
set -g message-attr bright
set -g message-bg default
set -g message-fg blue
set -g display-time 2000
set -g display-panes-time 2000

# Notify if other windows has activities
set -g visual-activity on

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on


# -------- Keybinding settings ----------------------
# Use emacs keybindings
set-option -g status-keys "emacs"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Press 'v' to begin selection and 'y' to copy to system clipboard
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"


# -------- Session navigation ------------------------
# Jump between sessions easily
# Hit `space` to unfold window list
bind-key C-j choose-tree

# fuzzy-select a session to switch to
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf-tmux -d 20 --no-sort --reverse --tiebreak=index | xargs tmux switch-client -t"

# "break out" a session based on the current pane
bind-key C-b send-keys 'tmux attach & exit' 'C-m'

# kill the current session and switch us to another session, keeping us
# connected to tmux throughout.
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'


# -------- Window Creation / Navigation --------------
# create a new window
bind c new-window -c '#{pane_current_path}'

# swap windows left or right
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# move between windows with prefix + Ctrl+h / Ctrl+l
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Use prefix + Shift + l to go to the last active window
bind-key -r l last-window

# -------- Pane Creation / Navigation ----------------
# create a vertically split pane
bind-key - split-window -v  -c '#{pane_current_path}'

# create a horizontally split pane
bind-key \ split-window -h  -c '#{pane_current_path}'

# pane navigation with awareness of vim splits
# use Ctrl + hjkl\  (without prefix key)
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


# -------- Pane Management ---------------------------
# resize panes with Shift + direction key
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# Break current pane out to a new window
bind-key b break-pane -d

# Prompted join-pane
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# Easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# -----------------------------------------------------------------------

