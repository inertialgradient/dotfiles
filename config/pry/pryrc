# -*- mode: ruby -*-
# vi:syntax=ruby
# frozen_string_literal: true

# rubocop:disable Style/MixinUsage

updated_vim = File.join(ENV["HOMEBREW_PREFIX"], "bin/vim")
minimalrc = File.join(ENV["XDG_CONFIG_HOME"], "vim/vimrc.minimal.vim")
Pry.editor = "#{updated_vim} -u #{minimalrc}"

def with_captured_stdout
  original_stdout = $stdout  # capture previous value of $stdout
  $stdout = StringIO.new     # assign a string buffer to $stdout
  yield                      # perform the body of the user code
  $stdout.string             # return the contents of the string buffer
ensure
  $stdout = original_stdout  # restore $stdout to its previous value
end

unless defined?(Rails) && Rails.env
  begin
    require "jazz_fingers"
  rescue LoadError
    puts "jazz_fingers not loaded."
  end
end

if defined?(Rails)
  begin
    require "factory_bot_rails"
    include FactoryBot::Syntax::Methods
  rescue LoadError
    puts "FactoryBot not loaded."
  end
end

if defined?(Rails)
  def url_helpers
    include Rails.application.routes.url_helpers
    default_url_options[:host] = ENV["BASE_URL"]
  end
end

# Format stacktraces
Pry.config.exception_handler = proc do |output, exception, _|
  output.puts "#{exception.class}: #{exception.message}"
  exception.backtrace.each do |bt|
    puts "\tfrom: #{bt}"
    break if bt =~ /^\(pry\)/
  end
end

# Hit Enter to repeat last command
Pry::Commands.command(/^$/, "repeat last command") do
  last_cmd = Pry.history.to_a.last
  puts ["\e[37m\e[1m", last_cmd, "\e[0m"].join
  pry_instance.run_command(last_cmd)
end

# Aliases for common commands
Pry.commands.alias_command ".q", "exit"
Pry.commands.alias_command "!!", "disable-pry"
Pry.commands.alias_command ".w", "whereami"
Pry.commands.alias_command ".sh", "shell-mode"
Pry.commands.alias_command ".ss", "show-source"

if defined?(PryByebug)
  Pry.commands.alias_command ".c", "continue"
  Pry.commands.alias_command ".s", "step"
  Pry.commands.alias_command ".n", "next"
  Pry.commands.alias_command ".f", "finish"
end

if defined?(Hirb)
  Hirb.enable
  extend Hirb::Console
end

if defined?(JazzFingers)
  JazzFingers.configure do |config|
    config.colored_prompt = true
    config.application_name = File.basename(ENV["PWD"]) unless defined?(Rails)
  end
end

PRINT_CONFIG = {
  indent: -2, # Number of spaces for indenting.
  index: false, # Display array indices.
  html: false, # Use ANSI color codes rather than HTML.
  multiline: false, # Display in multiple lines.
  plain: false, # Use colors.
  raw: false, # Do not recursively format instance variables.
  sort_keys: false, # Do not sort hash keys.
  sort_vars: true, # Sort instance variables.
  limit: false, # Limit arrays & hashes. Accepts bool or int.
  ruby19_syntax: true, # Use Ruby 1.9 hash syntax in output.
  class_name: :class, # Method called to report the instance class name. (e.g. :to_s)
  object_id: true, # Show object id.
  color: {
    args: :whiteish,
    array: :white,
    bigdecimal: :cyan,
    class: :yellow,
    date: :greenish,
    falseclass: :red,
    integer: :cyanish,
    float: :cyan,
    hash: :whiteish,
    keyword: :cyan,
    method: :purpleish,
    nilclass: :red,
    rational: :cyan,
    string: :yellowish,
    struct: :whiteish,
    symbol: :cyanish,
    time: :greenish,
    trueclass: :green,
    variable: :cyanish,
  },
}

if defined?(AmazingPrint)
  AmazingPrint.defaults = PRINT_CONFIG
  AmazingPrint.pry!

  def pp(obj, opts = {})
    entry = Readline::HISTORY.reverse_each.find { _1.starts_with?('pp') }.split.last
    output = with_captured_stdout { ap(obj, { multiline: true }.merge(opts)) }
    pbcopy(entry, output)
    ap(obj, { multiline: true }.merge(opts))
  end

  def pbcopy(entry, output)
    commented_output =
      output
      .split("\n")
      .map { ["\e[0;30m#\e[0m", _1].join(" ") }
      .join("\n")

    code_listing = <<~RB.chomp
      ```rb
      #{entry}

      #{commented_output.gsub(/\e\[([;\d]+)?m/, '')}
      ```
    RB
    IO.popen('pbcopy', 'w') { _1 << code_listing }
  end

  if defined?(JazzFingers::AMAZING_PRINT)
    JazzFingers::AMAZING_PRINT.merge!(PRINT_CONFIG)
  end
end

if defined?(AwesomePrint)
  color = PRINT_CONFIG[:color].merge(args: :pale, hash: :pale, struct: :pale)
  AwesomePrint.defaults = PRINT_CONFIG.merge(color: color)
  AwesomePrint.pry!
end

# just to load necessary files
CodeRay.scan("example", :ruby).term

# https://github.com/rubychan/coderay/blob/master/lib/coderay/encoders/terminal.rb
# TODO: abstract away ansi codes and consistify
TERM_TOKEN_COLORS = {
  debug: "\e[1;37;44m",
  # annotation: "\e[34m",
  annotation: "\e[36m",
  # attribute_name: "\e[35m",
  attribute_name: "\e[36m",
  attribute_value: "\e[31m",
  binary: {
    self: "\e[31m",
    char: "\e[1;31m",
    delimiter: "\e[1;31m",
  },
  char: {
    self: "\e[35m",
    delimiter: "\e[1;35m"
  },
  class: "\e[1;36;4m",
  class_variable: "\e[36m",
  color: "\e[32m",
  comment: {
    self: "\e[1;30m",
    char: "\e[37m",
    delimiter: "\e[37m",
  },
  constant: "\e[1;36;4m",
  decorator: "\e[35m",
  definition: "\e[1;33m",
  directive: "\e[33m",
  docstring: "\e[31m",
  doctype: "\e[1;34m",
  done: "\e[1;30;2m",
  entity: "\e[31m",
  error: "\e[1;37;41m",
  exception: "\e[1;31m",
  float: "\e[0;36m",
  function: "\e[1;34m",
  global_variable: "\e[1;32m",
  hex: "\e[1;36m",
  id: "\e[1;34m",
  include: "\e[31m",
  integer: "\e[0;33m",
  imaginary: "\e[1;34m",
  important: "\e[1;31m",
  key: {
    self: "\e[35m",
    char: "\e[1;35m",
    delimiter: "\e[1;35m",
  },
  keyword: "\e[32m",
  label: "\e[1;33m",
  local_variable: "\e[33m",
  namespace: "\e[1;35m",
  octal: "\e[1;34m",
  predefined: "\e[36m",
  predefined_constant: "\e[1;36m",
  predefined_type: "\e[1;32m",
  preprocessor: "\e[1;36m",
  pseudo_class: "\e[1;34m",
  regexp: {
    self: "\e[35m",
    delimiter: "\e[1;35m",
    modifier: "\e[35m",
    char: "\e[1;35m",
  },
  reserved: "\e[32m",
  shell: {
    self: "\e[33m",
    char: "\e[1;33m",
    delimiter: "\e[1;33m",
    escape: "\e[1;33m",
  },
  string: {
    self: "\e[31m",
    modifier: "\e[1;31m",
    char: "\e[1;35m",
    delimiter: "\e[1;31m",
    escape: "\e[1;31m",
  },
  symbol: {
    self: "\e[33m",
    delimiter: "\e[1;33m",
  },
  tag: "\e[32m",
  type: "\e[0;36m",
  value: "\e[36m",
  variable: "\e[34m",
  insert: {
    self: "\e[42m",
    insert: "\e[1;32;42m",
    eyecatcher: "\e[102m",
  },
  delete: {
    self: "\e[41m",
    delete: "\e[1;31;41m",
    eyecatcher: "\e[101m",
  },
  change: {
    self: "\e[44m",
    change: "\e[37;44m",
  },
  head: {
    self: "\e[45m",
    filename: "\e[37;45m"
  },
}.freeze

Pry.config.theme = "railscasts"

if %w[emacs dumb].include?(ENV["TERM"]) || !ENV["INSIDE_EMACS"].nil?
  Pry.config.auto_indent = false
  Pry.config.color = true
  Pry.config.pager = false
  default = Pry::Prompt[:default]
  Pry.config.prompt = Pry::VERSION < "0.13.0" ? default[:value] : default

  module CodeRay
    module Encoders
      # :nodoc:
      class Terminal < Encoder
        TERM_TOKEN_COLORS.each_pair { |key, value| TOKEN_COLORS[key] = value } # override built-in colors
      end
    end
  end
else
  Pry.config.auto_indent = true
  Pry.config.color = true
  Pry.config.pager = true
end

def timeit
  starting = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  yield if block_given?
  ending = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  (ending - starting).round(4)
end


require "fileutils"

pry_history_path = FileUtils.mkdir_p(File.join(ENV["XDG_STATE_HOME"], "pry")).first
Pry.config.history_file = File.join(pry_history_path, "pry_history")

pryrc_local_path = FileUtils.mkdir_p(File.join(ENV["XDG_LOCALS_DIR"], "config/pry")).first
pryrc_local = File.join(pryrc_local_path, "pryrc")
load(pryrc_local) if File.exist?(pryrc_local)

# rubocop:enable Style/MixinUsage
