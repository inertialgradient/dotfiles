#!/usr/bin/env bash

# defaults to 'start' if none given
subcommand="${1:-start}"
fzf_command="fzf-tmux -d 20 --ansi --no-sort --reverse --tiebreak=index"

function display_help() {
  echo "  Usage: mx [SUBCOMMAND]

  Available subcommands:
    help                    # Displays this menu
    ls                      # List all running and available sessions
    select                  # Select a running tmux session to switch to
    tat                     # Attach to a session named after the pwd, creating if necessary
    copy [EXISTING] [NEW]   # Copy an existing project to a new project and open.
    debug [PROJECT]         # Output the shell commands that are generated by tmux.
    delete [PROJECT]        # Deletes given project
    doctor                  # Look for problems in your configuration
    new [PROJECT]           # Create a new project file and open it in your editor
    start [PROJECT] [SESSION_NAME]  # Start a tmuxinator-managed tmux session."
}

# issue mx help to see subcommand options
if [[ "$subcommand" == "help" ]]; then
  display_help && exit 0
fi

# switch to a session named after the current directory, creating it if it
# doesn't already exist
if [[ "$subcommand" == "tat" ]]; then
  tmux-attach-or-create && exit 0
fi

if [[ "$subcommand" == "ls" ]]; then
  running_sessions="$(tmux ls 2> /dev/null | grep -v 'failed to connect')"
  tmuxinator_templates="$(tmuxinator list | sed -n '1!p')"

  echo "Running Sessions"
  echo "$(echo "$running_sessions" | sed 's/^/   /')"
  echo
  echo "Available Templates:"
  echo "$(echo "$tmuxinator_templates" | sed 's/\s\+/\n/g' | sed 's/^/   /')"

  exit 0
fi


if [[ "$subcommand" == "select"  ]]; then
  available_sessions="$(tmux ls 2> /dev/null | grep -v 'failed to connect')"
  [[ -z "$available_sessions" ]] && echo "No sessions running." && exit 0

  selection="$(echo "$available_sessions" | $fzf_command)"
  session="$(echo "$selection" | sed -E 's/^(\w+):.+/\1/')"

  # exit quietly if no session selected
  [[ -z "$session" ]] && exit 0

  echo "tmux attach-session -t $session"
  tmux attach-session -t $session

  exit 0
fi

# all other subcommands forwarded to tmuxinator
session="$(tmuxinator list | sed -n '1!p' | sed 's/\s\+/\n/g' | $fzf_command)"

# exit quietly if no session selected
[[ -z "$session" ]] && exit 0

echo "tmuxinator $subcommand $session"
tmuxinator $subcommand $session
