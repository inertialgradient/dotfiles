#!/usr/bin/env bash
#-------------------------------------------------------------
# Preamble
#-------------------------------------------------------------
LOCAL_DOTFILES="$HOME/.dotfiles"
SYNCED="$HOME/Dropbox/Sync"

function getc() {
  IFS= read -r -n1 -d '' "$@"
}

function step() {
  echo && echo "$1 ..."
}

#-------------------------------------------------------------
# Set up logging
#-------------------------------------------------------------
log_location="$HOME/Desktop/laptop.log"
touch "$log_location"

# pipe this whole script to tee
(
  step "Installing CLI tools, dotfiles, and Homebrew"

  # ===================================================

  step "Installing Xcode command line tools"

  loc="$(xcode-\select -p 2> /dev/null)"
  if [[ ! "$loc" =~ "CommandLineTools" ]]; then
    xcode-\select --install
    getc
  fi

  step "Accepting the Xcode CLI tools license"
  echo sudo xcodebuild -license
  sudo xcodebuild -license

  # ===================================================

  step "Cloning jmromer/dotfiles"

  if [ ! -d "$LOCAL_DOTFILES" ]; then
    git clone --recursive \
      https://github.com/jmromer/dotfiles.git \
      "$LOCAL_DOTFILES" 1> /dev/null
  fi

  # ===================================================

  step "Cloning emacs config repo"

  if [ ! -d "$HOME/.emacs.d" ]; then
    git clone https://github.com/syl20bnr/spacemacs \
      --branch=develop \
      "${HOME}/.emacs.d"
  fi

  # ===================================================

  step "Installing or updating Homebrew"

  brew_installed="$(command -v brew >/dev/null)"
  if [[ -z "$brew_installed" ]]; then
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' |\
      ruby
  else
    brew update
  fi

  # ===================================================

  step "Installing Homebrew Cask"

  brew tap caskroom/cask

  # ===================================================

  step "Installing Homebrew formulas"
  source "$HOME/.dotfiles/laptop/homebrew_packages.sh"

  step "Installing GNU tools"
  source "$HOME/.dotfiles/laptop/gnu_tools.sh"

  step "Installing GUI apps with Homebrew Cask"
  source "$HOME/.dotfiles/laptop/homebrew_cask_packages.sh"

  step "Linking OpenSSL, Installing libyaml"
  brew unlink openssl && brew link openssl --force
  brew install --force libyaml

  step "Setting up LaunchAgents"
  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/emacs/*.plist ~/Library/LaunchAgents
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
  launchctl load ~/Library/LaunchAgents/homebrew.mxcl.emacs.plist

  # ======================================================

  step "Setting homebrewed zsh as the default shell"

  echo /usr/local/bin/bash | sudo tee -a /etc/shells
  echo /usr/local/bin/zsh | sudo tee -a /etc/shells
  chsh -s /usr/local/bin/zsh

  # ======================================================

  step "Linking dotfiles into home directory"

  ln -s $HOME/.dotfiles/rcrc $HOME/.rcrc
  rcup

  mkdir $HOME/.config
  ln -s $SYNCED/hub $HOME/.config/hub
  ln -s $SYNCED/karabiner $HOME/.config/karabiner

  # ===================================================

  step "Setting up Dropbox (press any key when complete)"

  brew cask install dropbox
  open /Applications/Dropbox.app
  getc

  # ===================================================

  step "Setting up asdf"
  . "$(brew --prefix asdf)/asdf.sh"
  . "$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash"

  step "Setting Ruby compilation vars"
  . "$HOME/.ruby-build-vars"
  ln -sf $LOCAL_DOTFILES/default-gems $HOME/.default-gems

  step "Installing Ruby"
  ruby_version="$(asdf list-all ruby | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort | tail -1)"
  if ! asdf versions ruby | grep -Fq "$ruby_version"; then
    step "Installing Ruby $ruby_version"
    asdf install ruby "$ruby_version"
    asdf global ruby "$ruby_version"
    gem ctags

    step "Configuring Bundler"
    number_of_cores=$(sysctl -n hw.ncpu)
    bundle config --global jobs "$((number_of_cores - 1))"
  fi

  # ======================================================

  step "Creating ~/.ssh"

  echo mkdir $HOME/.ssh
  mkdir $HOME/.ssh

  echo cp $SYNCED/ssh/* $HOME/.ssh
  cp $SYNCED/ssh/* $HOME/.ssh

  echo chmod 600 $HOME/ssh/*
  chmod 600 $HOME/ssh/*

  # ======================================================

  step "Creating ~/.gnupg"

  echo gpg --list-keys
  gpg --list-keys

  echo cp -r $SYNCED/gnupg/* $HOME/.gnupg
  cp -r $SYNCED/gnupg/* $HOME/.gnupg

  # ===================================================

  step "Setting Mac OS X defaults"

  source $LOCAL_DOTFILES/osx/set_defaults.sh

  #-------------------------------------------------------------
  # terminfo entries
  #-------------------------------------------------------------

  step "Creating terminfo entries"

  for file in $HOME/.dotfiles/terminfo/*; do
    echo tic $file
    tic $file
  done

  # ======================================================

  step "Downloading miscellaneous installers"

  echo wget -O ~/Desktop/delivery-status.zip https://junecloud.com/get/delivery-status-widget
  wget -O ~/Desktop/delivery-status.zip https://junecloud.com/get/delivery-status-widget

  #-------------------------------------------------------------
  # Node
  #-------------------------------------------------------------

  echo "Installing node..."
  asdf plugin-add nodejs
  bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring

  source "$HOME/.zshrc"
  # Install latest node version
  node_version="$(asdf list-all nodejs | tail -1)"
  asdf install nodejs "$node_version"
  asdf global nodejs "$node_version"

  echo "Installing Python..."
  asdf plugin-add python
  asdf install python anaconda3-2018.12
  pip install pynvim

  brew install python@2
  pip2 install pynvim

  #-------------------------------------------------------------
  # Vim bootstrap
  #-------------------------------------------------------------

  step "Install Vim Packages"
  vim +PlugUpgrade +PlugUpdate +PlugInstall +UpdateRemotePlugin +qall

  step "Securing zsh compinit directories"
  compaudit | xargs chmod go-w

  # ======================================================

  step "Setup script is complete"

  step "Adobe Creative Suite"
  step "https://www.adobe.com/"

  step "JetBrains IDEs"
  step "https://www.jetbrains.com/"

  step "Docker for Mac"
  step "https://www.docker.com/products/docker-desktop"

) | tee $log_location
