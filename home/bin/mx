#!/usr/bin/env bash

subcommand="$1"
fzf_command="fzf-tmux -d 20 --ansi --no-sort --reverse --tiebreak=index --extended-exact"

function display_help() {
  echo "  Usage: mx [SUBCOMMAND]

  Available subcommands:
    help -- Displays this menu
    ls   -- List all running and available sessions
    tat  -- Attach to a PWD-named session if it exists, otherwise create and attach to it

    Fuzzy-Finder commands:

    [none] -- Start either a currently running or tmuxinator-managed session
    sat    -- Select and attach to a running tmux session
    debug  -- Output the shell commands that are generated by tmux.
    delete -- Deletes given project
    create -- Create a tmuxinator template named after the current directory
    edit   -- Edit a project file
    new    -- Create a new project file and open it in your editor

    To be implemented:

    copy [EXISTING] [NEW] -- Copy an existing project to a new project and open.
    start [PROJECT] [SESSION_NAME] -- Start a tmuxinator-managed tmux session.
  "
}

function running_tmux_sessions() {
  echo "$(tmux ls 2> /dev/null)" |\
    grep -v 'failed to connect' |\
    sed 's/:.\+$//'
}

function available_tmuxinator_sessions() {
  echo "$(tmuxinator list)" |\
    sed -n '1!p' |\
    sed 's/\s\+/\n/g'
}

function sorted_uniq() {
  echo "$1 $2" |\
    sed 's/\s\+/\n/g' |\
    sort |\
    uniq
}

function open_with_tmux() {
  echo tmux attach-session -t "$1"
  TERM=screen-256color-italic tmux attach-session -t "$1"
}

function open_with_tmuxinator() {
  echo tmuxinator start "$1"
  tmuxinator start "$1"
}

function switch_to_session() {
  echo tmux switch-client -t "$1"
  TERM=screen-256color-italic tmux switch-client -t "$1"
}

function open_or_switch_to_session() {
  if [[ -z "$TMUX" ]]; then
    open_with_tmux "$1"
  else
    switch_to_session "$1"
  fi
}


if [[ -z "$subcommand" ]]; then
  tmux_ls="$(running_tmux_sessions)"
  tmuxinator_ls="$(available_tmuxinator_sessions)"
  selection="$(sorted_uniq "$tmux_ls" "$tmuxinator_ls" | $fzf_command)"

  if [[ "$tmux_ls" =~ "$selection" ]]; then
    open_or_switch_to_session "$selection"
  elif [[ "$tmuxinator_ls" =~ "$selection" ]]; then
    open_with_tmuxinator "$selection"
  fi

  exit 0
fi

# issue mx help to see subcommand options
if [[ "$subcommand" == "help" ]]; then
  display_help

  exit 0
fi

# switch to a session named after the current directory,
# creating it if it doesn't already exist
if [[ "$subcommand" == "tat" ]]; then
  tmux-attach-or-create

  exit 0
fi

# create a tmuxinator template named after the current directory
if [[ "$subcommand" == "create" ]]; then
  directory_name="$(basename "$PWD" | sed 's/^\.//g')"

  tmuxinator copy base "$directory_name"

  exit 0
fi

# list all running session and available tmuxinator templates
if [[ "$subcommand" == "ls" ]]; then
  echo "Running Sessions:"
  running_tmux_sessions | sed 's/^/  /g'
  echo
  echo "Available Templates:"
  available_tmuxinator_sessions | sed 's/^/  /g'

  exit 0
fi

if [[ "$subcommand" == "sat"  ]]; then
  available_sessions="$(running_tmux_sessions)"

  if [[ -z "$available_sessions" ]]; then
    echo "No sessions running."
    exit 0
  fi

  selection="$(echo "$available_sessions" | $fzf_command)"

  if [[ ! -z "$selection" ]]; then
    open_or_switch_to_session "$selection"
  fi

  exit 0
fi

# all other subcommands forwarded to tmuxinator
if [[ "$subcommand" =~ ^start|debug|delete|new|edit$ ]]; then
  selection="$(available_tmuxinator_sessions | $fzf_command)"
  [[ -z "$selection" ]] && exit 0

  echo "tmuxinator $subcommand $selection"
  tmuxinator "$subcommand" "$selection"

  exit 0
fi

echo "  Error: Unrecognized subcommand" && echo
display_help
exit 1
