#!/usr/bin/env bash

#
# m-x
#
# Usage:
#   mx [SUBCOMMAND]
#
# A simplified wrapper over tmux and tmuxinator.
#
# Available subcommands:
#
#   [none] -- Start either a currently running or tmuxinator-managed session
#   help   -- Displays this menu
#   ls     -- List all running and available sessions
#
#   tmux:
#
#   checkout -- Attach to a PWD-named session if it exists, else start and attach to it
#   attach   -- Fuzzy-select and attach to a running tmux session
#   kill     -- Kill the given tmux session(s)
#
#   tmuxinator:
#
#   new    -- Create a new project file and open it in your editor
#   edit   -- Fuzzy-select a project file to edit
#   create -- Create a template
#   delete -- Fuzzy-select a project and delete it
#   debug  -- Output the shell commands that are generated by tmuxinator
#

set -e

fzf_command="fzf-tmux -d 20 --ansi --no-sort --reverse --tiebreak=index"

usage() {
    grep '^#' < "$0" | tail -n +2 | cut -c 3-
}

left_pad() {
    echo "$1" | sed 's/^/  /g'
}

running_tmux_sessions() {
    tmux list-sessions 2> /dev/null |\
        grep -v 'failed to connect' |\
        sed -E 's/(.+): .+/\1/' |\
        sed -n '1!p'
    }

tmuxinator_templates() {
    tmuxinator list |\
        sed -n '1!p' |\
        sed -E 's/\s+/\n/'
    }

open_or_switch_to_session() {
    if [[ -z "$TMUX" ]]; then
        echo tmux attach-session -t "$1"
        tmux attach-session -t "$1"
    else
        echo tmux switch-client -t "$1"
        tmux switch-client -t "$1"
    fi
}

tmux_dwim() {
    sessions="$(running_tmux_sessions)"
    templates="$(tmuxinator_templates)"
    [[ -z "$sessions" ]] && [[ -z "$templates" ]] && exit 0

    selections_list=""
    IFS=$'\n'
    for session in $sessions; do
      selections_list="$selections_list\n[session]\t$session"
    done

    for template in $templates; do
      selections_list="$selections_list\n[template]\t$template"
    done
    unset IFS

    selections_list=$(echo -e "$selections_list" | sed '/^[[:space:]]*$/d')

    selection="$(echo "$selections_list" | $fzf_command)"
    [[ -z "$selection" ]] && exit 0

    kind="$(echo $selection | awk '{ print $1 }')"
    name="$(echo $selection | sed -E 's/\[.+\]\s(.+)$/\1/')"

    if [[ "$kind" == '[session]' ]]; then
        open_or_switch_to_session "$name"
    elif [[ "$kind" == '[template]' ]]; then
        echo tmuxinator start "$name"
        tmuxinator start "$name"
    else
        echo "Unfamiliar selection: $selection"
        exit 1
    fi
}


tmux_attach() {
    available_sessions="$(running_tmux_sessions)"
    [[ -z "$available_sessions" ]] && exit 0

    selection="$(echo "$available_sessions" | $fzf_command)"
    [[ -z "$selection" ]] && exit 0
}

tmux_kill_session() {
    available_sessions="$(running_tmux_sessions)"
    [[ -z "$available_sessions" ]] && exit 0

    selection="$(echo "$available_sessions" | $fzf_command)"
    [[ -z "$selection" ]] && exit 0

    for session in $selection; do
        echo tmux kill-session -t "$session"
        tmux kill-session -t "$session"
    done

}

tmux_status() {
    # list all running session and available tmuxinator templates
    sessions="$(running_tmux_sessions)"
    templates="$(tmuxinator_templates)"

    [[ -z "$sessions" ]] && [[ -z "$templates" ]] && exit 0

    if [ -n "$sessions" ]; then
        echo "Running Sessions"
        echo "----------------"
        echo "$sessions"
        echo
    fi

    if [ -n "$templates" ]; then
        echo "Available Templates"
        echo "-------------------"
        echo "$templates"
        echo
    fi

}

tmuxinator_fuzzy_select() {
    templates="$(tmuxinator_templates)"
    [[ -z "$templates" ]] && exit 0

    selection="$(echo "$templates" | $fzf_command | sed 's/^ *//;s/ *$//')"
    [[ -z "$selection" ]] && exit 0

    echo tmuxinator "$1" "$selection"
    tmuxinator "$1" "$selection"
}

while [ $# -gt -1 ]; do
    case "$1" in
        '-h'|'--help'|'help')
            usage | $PAGER
            exit 2
            ;;
        "")
            tmux_dwim
            exit 0
            ;;
        'checkout'|'co')
            tmux-attach-or-create
            exit 0
            ;;
        'attach'|'a')
            tmux_attach
            exit 0
            ;;
        'kill'|'k')
            tmux_kill_session
            exit 0
            ;;
        'create'|'c'|'new'|'n')
            [[ -z "$2" ]] && echo "Usage: mx new [TEMPLATE_NAME]" && exit 1

            echo "Generate from a running session? (y/n)"
            read generate

            if [[ "$generate" == "y" ]]; then
                available_sessions="$(running_tmux_sessions)"
                selection="$(echo "$available_sessions" | $fzf_command)"
                [[ -z "$selection" ]] && exit 0

                tmuxinator new "$2" "$selection"
                tmuxinator edit "$2"
            fi

            if [[ "$generate" == "n" ]]; then
                tmuxinator new "$2"
            fi

            exit 0
            ;;
        'status'|'s')
            tmux_status
            exit 0
            ;;
        'start'|'debug'|'edit'|'delete')
            tmuxinator_fuzzy_select "$1"
            exit 0
            ;;
        *)
            (>&2 echo "Unrecognized argument: $1")
            exit 1
            ;;
    esac
done
