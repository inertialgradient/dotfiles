#!/usr/bin/env bash

#-------------------------------------------------------------
# Emacs
#-------------------------------------------------------------
if [ -n "$INSIDE_EMACS" ]; then
  export EDITOR=emacsclient
fi

#-------------------------------------------------------------
# GPG
#-------------------------------------------------------------
if [ ! -f "${HOME}/.gpg-agent-info" ]; then
  gpg-agent \
    --daemon \
    --write-env-file "${HOME}/.gpg-agent-info" >/dev/null
fi

# shellcheck source=/dev/null
source "${HOME}/.gpg-agent-info"
export GPG_AGENT_INFO

GPG_TTY=$(tty)
export GPG_TTY

#-------------------------------------------------------------
# Java
#-------------------------------------------------------------
java_path=/usr/libexec/java_home

if [[ -z "$JAVA_HOME" && -f "$java_path" ]]; then
  JAVA_HOME=$($java_path)
  export JAVA_HOME
fi

#-------------------------------------------------------------
# MacTeX
#-------------------------------------------------------------
export TEXMFVAR="$HOME/Library/texlive/2016/texmf-var"
export TEXMFCONFIG="$HOME/Library/texlive/2016/texmf-config"
export TEXMFSYSVAR="$TEXMFVAR"
export TEXMFSYSCONFIG="$TEXMFCONFIG"
export TEXMFLOCAL="$HOME/Library/texlive/2016/texmf-local"
export TEXDIR="$HOME/Library/texlive/2016"
export TEXMFHOME="$HOME/Library/texmf"

#-------------------------------------------------------------
# Python / Pyenv
#-------------------------------------------------------------
export PYTHON_CONFIGURE_OPTS="--enable-framework"

#-------------------------------------------------------------
# N / NODE
#-------------------------------------------------------------
export N_PREFIX="$HOME/.node"

#-------------------------------------------------------------
# GO
#-------------------------------------------------------------
export GOPATH="$HOME/.go"
export GOROOT="/usr/local/go"

#-------------------------------------------------------------
# ELM
#-------------------------------------------------------------
export ELM_HOME="$HOME/.elm"

#-------------------------------------------------------------
# GNU TOOLS (prepend to PATH)
#-------------------------------------------------------------
if [ -z "$GNUTOOLS_PATHS" ] || [ -z "$GNUTOOLS_MANS" ]; then
    gnu_tools='coreutils gnu-bin gnu-indent gnu-sed gnu-tar gnu-which gnutls'

    for gnu_tool in $(echo $gnu_tools); do
        GNUTOOLS_PATHS+=":/usr/local/opt/$gnu_tool/libexec/gnubin"
        GNUTOOLS_MANS+="/usr/local/opt/$gnu_tool/libexec/gnuman:"
    done
fi

#-------------------------------------------------------------
# MANPATH
#-------------------------------------------------------------
MANPATH="$GNUTOOLS_MANS"
MANPATH+="/usr/local/opt/erlang/lib/erlang/man:"
MANPATH+="/usr/local/opt/coreutils/libexec/gnuman:" # because GNU ls
MANPATH+="$(manpath)"
export MANPATH

source "$HOME/.env.secure.sh"

# if [ "$TERM" == "dumb" ]; then
#   unset zle_bracketed_paste
# fi

#-------------------------------------------------------------
# PATH
#-------------------------------------------------------------
PATH="$HOME/.bin"                  # user binaries
PATH+=$GNUTOOLS_PATHS              # GNU command-line tools
PATH+=":$HOME/.local/bin"          # haskell binaries
PATH+=":$HOME/.exenv/bin"          # Exenv binary path
PATH+=":$HOME/.pyenv/bin"          # Pyenv binary path
PATH+=":$GOPATH/bin:$GOROOT/bin"   # Go binaries
PATH+=":$HOME/.gem/ruby/2.0.0/bin" # user gems for system ruby
PATH+=":$N_PREFIX/bin"             # n version binaries
PATH+=":$HOME/.fzf/bin"            # FZF fuzzy-finder
PATH+=":$HOME/.anaconda3/bin"      # Anaconda binaries
PATH+=":$HOME/.gem/ruby/2.3.0/bin" # user-install system Ruby gems
PATH+=":/usr/local/heroku/bin"     # heroku-toolbelt binaries
PATH+=":/usr/local/bin"            # homebrewed binaries
PATH+=":/usr/local/sbin"           # homebrewed binaries
PATH+=":/usr/bin:/bin"             # system binaries
PATH+=":/usr/sbin:/sbin"           # system binaries requiring root
PATH+=":/opt/X11/bin"              # added by OSX
PATH+=":/Library/TeX/texbin"
PATH+=":/Library/Developer/Toolchains/swift-latest.xctoolchain/usr/bin"
PATH+=":$HOME/Library/texlive/2016/bin/x86_64-darwin"
export PATH

#-------------------------------------------------------------
# RBENV
#-------------------------------------------------------------
if command -v rbenv > /dev/null; then
  eval "$(rbenv init - --no-rehash)"
fi

#-------------------------------------------------------------
# EXENV
#-------------------------------------------------------------
if command -v exenv > /dev/null; then
  eval "$(exenv init -)";
fi

#-------------------------------------------------------------
# PYENV
#-------------------------------------------------------------
if command -v pyenv > /dev/null; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi
